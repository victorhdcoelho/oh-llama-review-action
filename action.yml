name: 'Oh llama Code Reviewer'
description: 'Code review using Ollama Automatically'
branding:
  icon: eye
  color: yellow
inputs:
  model:
    description: 'Ollama model to use for code review'
    required: true
    default: 'codellama'
runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v45
      with:
        paths: |
          # Include only Python files
          *.py
          # Include all files in the src directory
          src/**
          
    - name: List all changed files
      shell: bash
      env:
        ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
      run: |
        for file in ${ALL_CHANGED_FILES}; do
          echo "$file was changed"
        done

    - name: Install and Setup Ollama and GH CLI
      run: |
        # Install Ollama and GH CLI
        curl -fsSL https://ollama.com/install.sh | sh
        curl -sS https://webi.sh/gh | sh
        export PATH="$HOME/.local/bin:$PATH"

        export GITHUB_TOKEN=
        echo ${{ github.token }} | gh auth login --with-token

        # Start ollama with nohup, stander and error log write to ollama.log
        nohup ollama serve > ollama.log 2>&1 &

        # Wait ollama serve as a service
        for times in {1..10}; do
          if curl -s http://127.0.0.1:11434/ | grep "Ollama is running"; then
            echo "Ollama is ready to serve."

            # pull model
            echo "start to pull model:${{ inputs.model }}"
            ollama pull ${{ inputs.model }}
            ollama list
            exit 0
          fi
          echo "Waiting for ollama to start"
          sleep 3
        done
        echo "Fail to start ollama as a service"
        exit 1
      shell: bash

    - name: Review code
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo $file
          content=$(cat "$file")
          content=${content//\'/\'\'}
          content=${content//\"/\\\"}
          content=$(echo "$content" | tr '\n' ' ')
          review=$(curl -s http://127.0.0.1:11434/api/generate -d '{"model": "${{ inputs.model }}", "prompt": "Como um engenheiro de software, revise o código a seguir, indicando as melhores soluções, melhores práticas, melhor legibilidade e capacidade de manutenção. Caso necessário dar exemplos de refatorações de código possíveis e mostrar casos de testes não cobertos:\n\n```\n'"${content}"'\n```", "stream": false}' | jq -r '.response')

          echo $review

          if [[ $review == "null" ]]
          then
            comments="Ollama Code Review for \`$file\`: All good!"
          else
            comments="Ollama Code Review for \`$file\`:\n\n$review"
          fi

          gh pr comment ${{ github.event.pull_request.number }} --body "${comments}"
        done
      shell: bash
